<div class="container">
  <div class="row justify-content-center align-items-center pt-4">
    <div class="col-sm-6 col-sm-offset-3">
  <h2>Edit <%= resource_name.to_s.humanize %></h2>
  
  <%= bootstrap_form_for(resource, as: resource_name, url: registration_path(resource_name), html: { method: :put }) do |f| %>

    <%= render "devise/shared/error_messages", resource: resource %>

    <div class="field">
      <!--<%= f.label :email %><br />-->
      <%= f.email_field :email, autofocus: true, autocomplete: "email" %>
    </div>

    <% if devise_mapping.confirmable? && resource.pending_reconfirmation? %>
      <div>Currently waiting confirmation for: <%= resource.unconfirmed_email %></div>
    <% end %>

    <div class="field">
      <i>(leave password blank if you don't want to change it)</i><br />
      <%= f.password_field :password, autocomplete: "new-password" %>
      <!--
      <% if @minimum_password_length %>
        <br />
        <em><%= @minimum_password_length %> characters minimum</em>
      -->
      <% end %>
    </div>

    <div class="field">
      <%= f.password_field :password_confirmation, autocomplete: "new-password" %>
    </div>

    <div class="field">
      <%= f.password_field :current_password%>
    </div>

    
    <div class="select">
      <%= f.select :country, options_for_select(CS.countries.map { |c| [c[1], c[0]] } ) %>
    </div>
    <div class="select">
      <%= f.select :province, {}, :include_blank => "select a province", :id => "province" %>
    </div>
    <div class="select">
      <%= f.select :city, {}, :include_blank => "select a city", :id => "city" %>
    </div>


    <div class="actions">
      <%= f.submit "Update", class: "btn btn-primary" %>
    </div>
    
  <% end %>

  <h3>Cancel my account</h3>

  <p>Unhappy with Card Maestro? <%= button_to "Cancel my account", registration_path(resource_name), data: { confirm: "Are you sure?" }, method: :delete %></p>

 
</div>



<script>
  var country = document.getElementById("user_country");
  var state = document.getElementById("user_province");


  country.addEventListener("change", function(){
        
        var state = document.getElementById("user_province");

        //loop through all returned cities for state
        $.getJSON('/states/' + $(this).val(), function (data) {
          
          //clears any options in dropdown
          while (state.firstChild) state.removeChild(state.firstChild);

          //default value
          state.options[0] = new Option("Select State");

          //loop and add optoons
          Object.keys(data).forEach(key=>{
            state.options[state.options.length] = new Option(data[key], key);
          });
          
        
        });
      });

      state.addEventListener("change", function(){
        
        var city = document.getElementById("user_city");
        var country = document.getElementById("user_country");

        //loop through all returned cities for state
        $.getJSON('/cities/' + $(this).val()+'/'+ country.options[country.options.selectedIndex].value, function (data) {
          
          //clears any options in dropdown
          while (city.firstChild) city.removeChild(city.firstChild);

          //default value
          city.options[0] = new Option("Select City");

          //loop and add optoons
          for(var i = 0; i < data.length; i++)
          {
            
            city.options[city.options.length] = new Option(data[i]);
          }
          
        
        });
      });
  </script>
